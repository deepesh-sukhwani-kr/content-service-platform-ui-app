name: Sonar Test

on:
  push:
    branches: [ main]
  workflow_dispatch:

defaults:
  run:
    shell: bash

env:
  SONAR_HOST_URL_REF: 'http://sonar.kroger.com/sonar'
  SONAR_TOKEN_REF: ${{ secrets.SONAR_TOKEN }}
  ARTIFACTORY_EDGE_USERNAME_REF: ${{ secrets.ARTIFACTORY_EDGE_USERNAME }}
  ARTIFACTORY_EDGE_TOKEN_REF:  ${{ secrets.ARTIFACTORY_EDGE_TOKEN }}
  TARGET_PATH: /home/vsts-agent/actions-runner/_work

jobs:
  Build-And-Publish:
    runs-on: [self-hosted, Linux, X64, tsa, kroger]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Get Version
        id: get_version
        run: |
          echo "Version: `echo ${GITHUB_SHA} | cut -c1-8`"
          echo "::set-output name=tag::`echo ${GITHUB_SHA} | cut -c1-8`"
      - name: Setup JDK 8
        uses: actions/setup-java@v2
        with:
          java-version: '8'
          distribution: 'adopt'

      - name: Create Maven Settings File
        uses: whelk-io/maven-settings-xml-action@v18
        with:
          output_file: tmp/settings.xml
          repositories: |
            [
              {
                "id": "artcentral",
                "name": "libs-release",
                "url": "https://krogertechnology.jfrog.io/artifactory/libs-release",
                "snapshots": {
                  "enabled": "false"
                }
              },
              {
                "id": "artsnapshots",
                "name": "libs-snapshot",
                "url": "https://krogertechnology.jfrog.io/artifactory/libs-snapshot",
                "snapshots": {
                }
              }
            ]
          plugin_repositories: |
            [
              {
                "id": "artcentral",
                "name": "plugin-release",
                "url": "https://krogertechnology.jfrog.io/artifactory/plugins-release",
                "snapshots": {
                  "enabled": "false"
                }
              },
              {
                "id": "artsnapshots",
                "name": "plugin-snapshot",
                "url": "https://krogertechnology.jfrog.io/artifactory/plugins-snapshot",
                "snapshots": {
                }
              }
            ]
          servers: |
            [
              {
                "id": "artcentral",
                "username": "${{ secrets.JFROG_USERNAME }}",
                "password": "${{ secrets.JFROG_PASSWORD }}"
              },
              {
                "id": "artsnapshots",
                "username": "${{ secrets.JFROG_USERNAME }}",
                "password": "${{ secrets.JFROG_PASSWORD }}"
              }
            ]
          mirrors: |
            [
              {
                "id": "artremote",
                "name": "remote-repos",
                "mirrorOf": "*,!artcentral,!artsnapshots,!artremote",
                "url": "https://krogertechnology.jfrog.io/artifactory/remote-repos"
              }
            ]
      - name: Install buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to Registry
        uses: docker/login-action@v1
        with:
          registry: krogertechnology-docker-prod.jfrog.io
          username: ${{ secrets.JFROG_USERNAME }}
          password: ${{ secrets.JFROG_PASSWORD }}

      - name: Build Application with Maven
        run: |
          echo
          echo "build jar"
          mvn -version
          mvn --batch-mode --settings tmp/settings.xml -U clean package
      # This is the a separate action that sets up buildx runner
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      # So now you can use Actions' own caching!
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Install jq
        shell: sh
        run: |
          if ! [ -x "$(command -v jq)" ]; then
            wget -O /usr/local/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            chmod +x /usr/local/bin/jq
          fi
          if ! [ -x "$(command -v jq)" ]; then
            echo 'Error: jq is not installed/failed to install.' >&2
            exit 1
          fi
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN_REF }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL_REF }}

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN_REF }}
#       - name: Dockerize
#         uses: docker/build-push-action@v2.7.0
#         with:
#           context: .
#           push: ${{ github.event_name != 'pull_request' }}
#           build-args: |
#             PAT=${{ secrets.PAT }}
#           tags: "${{env.DOCKER_BASE_REPOSITORY}}/imp/dap/poc/poc-app:${{ env.IMAGE_TAG }}"

#       - name: Upload Artifacts
#         uses: actions/upload-artifact@v2
#         with:
#           name: binary
#           path: ${{ env.TARGET_PATH }}/dap-build-poc/dap-build-poc/target
