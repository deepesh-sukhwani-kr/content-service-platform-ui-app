name: Test_CDC_Deploy

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:

jobs:
  deploy-test:
    runs-on: [self-hosted, tsa]
    environment:
      name : test
    env:
      DOCKER_REGISTRY_ENV: prod
      RELEASE_TAG: v1.0
      TARGET_TAG: test
    steps:
      - name: Check out repo
        uses: actions/checkout@v2

      - name: üîê Set up kubeconfig for DAPAPP-Test
        uses: Azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.NONPROD_KUBE_CONFIG_CDC }}

      - uses: azure/k8s-create-secret@v1
        with:
          namespace: dapapp-test
          secret-type: 'generic'
          arguments: |
            --from-literal=SPRING_PROFILES_ACTIVE=test
          secret-name: csp-ui-server-app-v1-settings
      #Deploy from dev image.
      - uses: Azure/k8s-deploy@v1.2
        with:
          namespace: dapapp-test
          manifests: |
            deploy/test/test-cdc-manifest.yml
          strategy: blue-green
          images: |
            docker-${{ env.DOCKER_REGISTRY_ENV }}.registry.kroger.com/imp/dap/csp-ui-app/v1/csp-ui-server-app:${{ env.RELEASE_TAG }}
      # If the deployment is successful tag the docker image with whatever env it successfully deployed to eg dev,test,stage,prod
      # Conformant with https://confluence.kroger.com/confluence/pages/viewpage.action?pageId=192986435#Checklist&Tracker-DAPBuildanddeployStrategyOutline
      # This will prevent pollution of the docker image by
      - name: Tag dev image as test and store in docker repo
        if: success()
        uses: timperman/artifactory-promote-action@v1
        with:
          url: https://artifactory.kroger.com
          username: ${{ secrets.ARTIFACTORY_USERNAME }}
          password: ${{ secrets.ARTIFACTORY_PASSWORD }}
          sourceRepo: docker-prod
          targetRepo: docker-prod
          dockerRepository: imp/dap/csp-ui-app/v1/csp-ui-server-app
          tag: ${{ env.RELEASE_TAG }}
          targetTag: ${{ env.TARGET_TAG }}
          copy: 'true'
      - name: 'Clean up'
        run: rm -rf *